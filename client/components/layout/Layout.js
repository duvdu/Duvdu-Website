import React, { useEffect, useState } from "react";
import Head from "next/head";
import Footer from "./Footer";
import Header from "./Header";
import MobileMenu from "./MobileMenu";
import { connect } from "react-redux";
import { getMyprofile } from "../../redux/action/apis/auth/profile/getProfile";
import { GetAllChats } from "../../redux/action/apis/realTime/chat/chats";
import { GetNotifications, } from "../../redux/action/apis/realTime/notification/getAllNotification";
import { getCategory } from "../../redux/action/apis/category/getCategories";
import { init } from "../../redux/action/apis/init/getdata";
import { useRouter } from "next/router";
import { LogOut } from "../../redux/action/apis/auth/logout";
import Chat from "../elements/Chat/chat";
import ErrorAndLoadingHandling from "./assets/errorAndLoadingHandling";
import RegistrationRequired from "../popsup/booking/registrationRequired";
import TestOTPCode from "../popsup/testOTPCode";
import GoogleAnalytics from "../GoogleAnalytics";
import FaceVerification from '../popsup/faceVerification';
import Subscribe from '../popsup/subscribe';
import { IsPopUpOpen } from "../../util/util";


const Layout = ({
    user,
    isLogin,
    children,
    shortheader,
    isbodyWhite,
    headerStyle,
    showTabs = true,
    iSsticky = true,
    getMyprofile,
    GetAllChats,
    GetNotifications,
    getCategory,
    getMyprofile_respond,
    GetAllChats_respond,
    GetNotifications_respond,
    getCategory_respond,
    logout_respond,
    LogOut,
    
    init

}) => {
    const [isToggled, setToggled] = useState(1);
    const router = useRouter();
    useEffect(() => {
        const handleResize = () => {
            if (window.innerWidth >= 1024) {
                setToggled(1);
                document.body.classList.remove("mobile-menu-active");
            }
        };
    
        window.addEventListener("resize", handleResize);
    
        // نعمل تشيك أول مرة كمان
        handleResize();
    
        return () => {
            window.removeEventListener("resize", handleResize);
        };
    }, []);
    
    const toggleClick = (type) => {
        setToggled(type);
        isToggled > 1
            ? document
                .querySelector("body")
                .classList.remove("mobile-menu-active")
            : document
                .querySelector("body")
                .classList.add("mobile-menu-active");
    };

    useEffect(() => {
        if (!getCategory_respond)
            getCategory()
    }, [getCategory_respond])

    useEffect(() => {
        if (!user)
            getMyprofile()
    }, [user])

    useEffect(() => {
        init()
    }, [])
    
    useEffect(() => {
        if(getMyprofile_respond?.message === 'success' && !getMyprofile_respond?.data?.phoneNumber?.number)
            router.push(`/addPhoneNumber?${getMyprofile_respond?.data?.username}`);
    }, [getMyprofile_respond?.message])
    
    useEffect(() => {
        if(logout_respond?.data) {
            router.push({
            pathname: "/login",
        });
        LogOut(-1)
    }
    }, [logout_respond]);


    return (
        <>
            {isLogin && !user?.faceRecognition && 
            <FaceVerification />
            }
            {isLogin  && 
            <Subscribe />
            } 
            <Head>
                <title>{"Duvdu"}</title>
                <meta name="description" content={"Generated by Duvdu Team"} />
                <meta name="viewport" content="width=device-width, initial-scale=1.0" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Chat/>
            <ErrorAndLoadingHandling/>
            <RegistrationRequired/>
            <TestOTPCode/>
            {/* {isToggled && <div className="body-overlay-1" onClick={toggleClick}></div>} */}

            <Header headerStyle={headerStyle} isToggled={isToggled} toggleClick={toggleClick} fromlayout={{ shortheader: shortheader, iswhite: isbodyWhite, showTabs: showTabs, iSsticky: iSsticky }} />

            <MobileMenu isToggled={isToggled} toggleClick={toggleClick} fromlayout={{ shortheader: shortheader }} />

            <main className="main bg-body" >
                {children}
            </main>
            <GoogleAnalytics ga_id="G-L1SQRZGHZB" />
            
            {/* <Footer /> */}
        </>
    );
};
const mapStateToProps = (state) => ({
    user: state.auth.user,
    login_respond: state.api.login,
    getMyprofile_respond: state.api.getMyprofile,
    categories: state.categories,
    GetAllChats_respond: state.api.GetAllChats,
    GetNotifications_respond: state.api.GetNotifications,
    logout_respond: state.api.LogOut,
    getCategory_respond: state.api.getCategory,
    isLogin: state.auth.login,
});

const mapDispatchToProps = {
    getMyprofile,
    GetAllChats,
    GetNotifications,
    
    LogOut,
    init,
    getCategory

};
export default connect(mapStateToProps, mapDispatchToProps)(Layout);
