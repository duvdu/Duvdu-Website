import React, { useEffect, useState } from "react";
import Head from "next/head";
import Footer from "./Footer";
import Header from "./Header";
import MobileMenu from "./MobileMenu";
import { connect } from "react-redux";
import { getMyprofile } from "../../redux/action/apis/auth/profile/getProfile";
import { GetAllChats } from "../../redux/action/apis/realTime/chat/chats";
import { GetNotifications } from "../../redux/action/apis/realTime/notification/getAllNotification";
import { GetSavedBoard } from "../../redux/action/apis/savedProject/boardProjects/getone";
import { GetBoards } from "../../redux/action/apis/savedProject/board/get";
import { GetFavList } from "../../redux/action/apis/savedProject/fav/getAll";
import { getCategory } from "../../redux/action/apis/category/getCategories";

const Layout = ({
    user,
    children,
    shortheader,
    isbodyWhite,
    headerStyle,
    showTabs = true,
    iSsticky = true,
    getMyprofile,
    GetAllChats,
    GetNotifications,
    GetBoards,
    GetFavList,
    categories,
    getCategory,

    GetBoards_respond,
    GetAllChats_respond,
    GetNotifications_respond,
    GetFavList_respond,
    getCategory_respond,

}) => {
    const [isToggled, setToggled] = useState(1);


    const toggleClick = (type) => {
        setToggled(type);
        isToggled > 1
            ? document
                .querySelector("body")
                .classList.remove("mobile-menu-active")
            : document
                .querySelector("body")
                .classList.add("mobile-menu-active");
    };

    useEffect(() => {
        if (!getCategory_respond)
            getCategory()
    }, [getCategory_respond])
    
    useEffect(() => {
        if (!user)
            getMyprofile()
    }, [user])



    useEffect(() => {
        if (user) {
            if (!GetBoards_respond)
                GetBoards({})
            if (!GetFavList_respond)
                GetFavList({})
            if (!GetAllChats_respond)
                GetAllChats()
            if (!GetNotifications_respond)
                GetNotifications()
        }
    }, [user])

    return (
        <>
            <Head>
                <title>{"hader of duvdu"}</title>
                <meta name="description" content={"Generated by create Ahmed Magdy"} />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            {isToggled && <div className="body-overlay-1" onClick={toggleClick}></div>}

            <Header headerStyle={headerStyle} isToggled={isToggled} toggleClick={toggleClick} fromlayout={{ shortheader: shortheader, iswhite: isbodyWhite, showTabs: showTabs, iSsticky: iSsticky }} />

            <MobileMenu isToggled={isToggled} toggleClick={toggleClick} />

            <main className="main bg-body" >
                {children}
            </main>
            {/* <Footer /> */}
        </>
    );
};
const mapStateToProps = (state) => ({
    user: state.auth.user,
    login_respond: state.api.login,
    getMyprofile_respond: state.api.getMyprofile,
    categories: state.categories,

    GetAllChats_respond: state.api.GetAllChats,
    GetNotifications_respond: state.api.GetNotifications,
    GetBoards_respond: state.api.GetBoards,
    GetFavList_respond: state.api.GetFavList,
    getCategory_respond: state.api.getCategory,
});

const mapDispatchToProps = {
    getMyprofile,
    GetAllChats,
    GetNotifications,
    GetBoards,
    GetFavList,
    getCategory

};
export default connect(mapStateToProps, mapDispatchToProps)(Layout);
